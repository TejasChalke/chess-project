package com.example.chessengine.MyEngine.AI;

import com.example.chessengine.MyEngine.Pieces;
public class PieceSquareTable {

    // colorToMove, gameStage, values
    static int[][][] pawnTable, knightTable, bishopTable, rookTable, queenTable, kingTable;

    static {
        pawnTable = new int[2][3][64];
        knightTable = new int[2][3][64];
        bishopTable = new int[2][3][64];
        rookTable = new int[2][3][64];
        queenTable = new int[2][3][64];
        kingTable = new int[2][3][64];

        // opening pawn values
        // white
        pawnTable[0][0] = new int[] {
                0,  0,  0,  0,  0,  0,  0,  0,
                50, 50, 50, 50, 50, 50, 50, 50,
                10, 10, 20, 35, 35, 20, 10, 10,
                5,  5, 10, 30, 30, 10,  5,  5,
                0,  0,  0, 25, 25,  0,  0,  0,
                5, -5,-10, 10, 10,-10, -5,  5,
                5, 10, 10,-30,-30, 10, 10,  5,
                0,  0,  0,  0,  0,  0,  0,  0
        };
        // black
        pawnTable[1][0] = new int[] {
                0,  0,  0,  0,  0,  0,  0,  0,
                5, 10, 10,-30,-30, 10, 10,  5,
                5, -5,-10, 10, 10,-10, -5,  5,
                0,  0,  0, 25, 25,  0,  0,  0,
                5,  5, 10, 30, 30, 10,  5,  5,
                10, 10, 20, 35, 35, 20, 10, 10,
                50, 50, 50, 50, 50, 50, 50, 50,
                0,  0,  0,  0,  0,  0,  0,  0
        };

        // opening knight table
        // white
        knightTable[0][0] = new int[] {
                -50,-40,-30,-30,-30,-30,-40,-50,
                -40,-20,  0,  0,  0,  0,-20,-40,
                -30,  0, 10, 15, 15, 10,  0,-30,
                -30,  5, 15, 20, 20, 15,  5,-30,
                -30,  0, 15, 20, 20, 15,  0,-30,
                -30,  5, 10, 15, 15, 10,  5,-30,
                -40,-20,  0,  5,  5,  0,-20,-40,
                -50,-40,-30,-30,-30,-30,-40,-50,
        };
        // black
        knightTable[1][0] = new int[] {
                -50,-40,-30,-30,-30,-30,-40,-50,
                -40,-20,  0,  5,  5,  0,-20,-40,
                -30,  0, 10, 15, 15, 10,  0,-30,
                -30,  5, 15, 20, 20, 15,  5,-30,
                -30,  0, 15, 20, 20, 15,  0,-30,
                -30,  5, 10, 15, 15, 10,  5,-30,
                -40,-20,  0,  0,  0,  0,-20,-40,
                -50,-40,-30,-30,-30,-30,-40,-50,
        };

        // bishop opening table
        // white
        bishopTable[0][0] = new int[] {
                -20,-10,-10,-10,-10,-10,-10,-20,
                -10,  0,  0,  0,  0,  0,  0,-10,
                -10,  0,  5, 10, 10,  5,  0,-10,
                -10,  5,  5, 10, 10,  5,  5,-10,
                -10,  0, 10, 10, 10, 10,  0,-10,
                -10, 10, 10, 10, 10, 10, 10,-10,
                -10,  5,  0,  0,  0,  0,  5,-10,
                -20,-10,-10,-10,-10,-10,-10,-20,
        };
        // black
        bishopTable[1][0] = new int[] {
                -20,-10,-10,-10,-10,-10,-10,-20,
                -10,  5,  0,  0,  0,  0,  5,-10,
                -10, 10, 10, 10, 10, 10, 10,-10,
                -10,  0, 10, 10, 10, 10,  0,-10,
                -10,  5,  5, 10, 10,  5,  5,-10,
                -10,  0,  5, 10, 10,  5,  0,-10,
                -10,  0,  0,  0,  0,  0,  0,-10,
                -20,-10,-10,-10,-10,-10,-10,-20
        };

        // rook opening table
        // white
        rookTable[0][0] = new int[] {
                0,  0,  0,  0,  0,  0,  0,  0,
                5, 10, 10, 10, 10, 10, 10,  5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                0,  0,  0,  5,  5,  0,  0,  0
        };
        // black
        rookTable[1][0] = new int[] {
                0,  0,  0,  5,  5,  0,  0,  0,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                -5,  0,  0,  0,  0,  0,  0, -5,
                5, 10, 10, 10, 10, 10, 10,  5,
                0,  0,  0,  0,  0,  0,  0,  0,
        };

        // queen opening table
        // white
        queenTable[0][0] = new int[] {
                -20,-10,-10, -5, -5,-10,-10,-20,
                -10,  0,  0,  0,  0,  0,  0,-10,
                -10,  0,  5,  5,  5,  5,  0,-10,
                -5,  0,  5,  5,  5,  5,  0, -5,
                0,  0,  5,  5,  5,  5,  0, -5,
                -10,  5,  5,  5,  5,  5,  0,-10,
                -10,  0,  5,  0,  0,  0,  0,-10,
                -20,-10,-10, -5, -5,-10,-10,-20
        };
        // black
        queenTable[1][0] = new int[] {
                -20,-10,-10, -5, -5,-10,-10,-20,
                -10,  0,  5,  0,  0,  0,  0,-10,
                -10,  5,  5,  5,  5,  5,  0,-10,
                -5,  0,  5,  5,  5,  5,  0, -5,
                0,  0,  5,  5,  5,  5,  0, -5,
                -10,  0,  5,  5,  5,  5,  0,-10,
                -10,  0,  0,  0,  0,  0,  0,-10,
                -20,-10,-10, -5, -5,-10,-10,-20
        };

        // king opening and middle game table
        // white
        kingTable[0][0] = kingTable[0][1] =new int[] {
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -20,-30,-30,-40,-40,-30,-30,-20,
                -10,-20,-20,-20,-20,-20,-20,-10,
                20, 20,  0,  0,  0,  0, 20, 20,
                30, 40, 10,  0,  0, 10, 40, 30
        };
        // black
        kingTable[1][0] = kingTable[1][1] = new int[] {
                30, 40, 10,  0,  0, 10, 40, 30,
                20, 20,  0,  0,  0,  0, 20, 20,
                -10,-20,-20,-20,-20,-20,-20,-10,
                -20,-30,-30,-40,-40,-30,-30,-20,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30,
                -30,-40,-40,-50,-50,-40,-40,-30
        };
    }

    static int GetSquareValue(int piece, int colorIndex, int squareIndex, int gamePhaseWeight){
        int phase = 0;

        return switch (piece & 7){
            case Pieces.Pawn -> pawnTable[colorIndex][phase][squareIndex];
            case Pieces.King -> kingTable[colorIndex][phase][squareIndex];
            case Pieces.Queen -> queenTable[colorIndex][phase][squareIndex];
            case Pieces.Rook -> rookTable[colorIndex][phase][squareIndex];
            case Pieces.Bishop -> bishopTable[colorIndex][phase][squareIndex];
            case Pieces.Knight -> knightTable[colorIndex][phase][squareIndex];
            default -> 0;
        };
    }

}
